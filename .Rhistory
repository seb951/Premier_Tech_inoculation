setwd("/Users/jerry/Documents/CSBQ/hijri/Premier_Tech")
###
#load blast results
blastn = read.table("results/PT_combined_denoised_formated2.blastn.out",header = F, stringsAsFactors = F)
dim(blastn)
blastn[1:5,1:5]
#merge the OTU table according to the VT
OTU.table = read.table("results/PT_AMF.otu_table_from_biom.txt", sep = "\t", stringsAsFactors = F, header = T,skip=1,comment.char = "")
OTU.table = OTU.table[,-ncol(OTU.table)]
OTU.table$VT = 0
dim(OTU.table)
OTU.table[1:5,118]
OTU.table[1:5,117]
OTU.table[1:5,116]
OTU.names = read.table("results/OTU_names",stringsAsFactors = F, header = F)
OTU.names = cbind(gsub(">","",OTU.names[,1]),0)
colnames(OTU.names) = c("OTU","VT")
system("rm results/OTU_names")
#new BLAST table with only best annotated hit (VTX) per OTU.
for(i in 1:nrow(OTU.names))
{
temp = 0
temp = blastn[blastn[,1] == OTU.names[i,1],]
if(length(temp)>1){
#ordered according to evalue
temp.ordered = temp[order(temp[,11]),]
#only keep annotations with a VTX
temp.ordered.vtx = temp.ordered[regexpr("VTX",temp.ordered[,2])>0,]
#keep best hit
split = strsplit(temp.ordered.vtx[1,2],"_")[[1]]
OTU.names[i,2] = split[length(split)]
}
}
#get OTU names and remove temp file
system("grep '>' results/PT_combined_denoised_formated2.fasta >results/OTU.names")
OTU.names = read.table("results/OTU_names",stringsAsFactors = F, header = F)
OTU.names = cbind(gsub(">","",OTU.names[,1]),0)
colnames(OTU.names) = c("OTU","VT")
system("rm results/OTU_names")
#new BLAST table with only best annotated hit (VTX) per OTU.
for(i in 1:nrow(OTU.names))
{
temp = 0
temp = blastn[blastn[,1] == OTU.names[i,1],]
if(length(temp)>1){
#ordered according to evalue
temp.ordered = temp[order(temp[,11]),]
#only keep annotations with a VTX
temp.ordered.vtx = temp.ordered[regexpr("VTX",temp.ordered[,2])>0,]
#keep best hit
split = strsplit(temp.ordered.vtx[1,2],"_")[[1]]
OTU.names[i,2] = split[length(split)]
}
}
#get OTU names and remove temp file
system("grep '>' results/PT_combined_denoised_formated2.fasta >results/OTU.names")
OTU.names = read.table("results/OTU_names",stringsAsFactors = F, header = F)
OTU.names = cbind(gsub(">","",OTU.names[,1]),0)
colnames(OTU.names) = c("OTU","VT")
system("rm results/OTU_names")
getwd()
OTU.names
getwd()
OTU.names = read.table("results/OTU_names",stringsAsFactors = F, header = F)
system("grep '>' results/PT_combined_denoised_formated2.fasta >results/OTU.names")
OTU.names = read.table("results/OTU_names",stringsAsFactors = F, header = F)
OTU.names = read.table("results/OTU.names",stringsAsFactors = F, header = F)
OTU.names = cbind(gsub(">","",OTU.names[,1]),0)
colnames(OTU.names) = c("OTU","VT")
system("rm results/OTU_names")
#new BLAST table with only best annotated hit (VTX) per OTU.
for(i in 1:nrow(OTU.names))
{
temp = 0
temp = blastn[blastn[,1] == OTU.names[i,1],]
if(length(temp)>1){
#ordered according to evalue
temp.ordered = temp[order(temp[,11]),]
#only keep annotations with a VTX
temp.ordered.vtx = temp.ordered[regexpr("VTX",temp.ordered[,2])>0,]
#keep best hit
split = strsplit(temp.ordered.vtx[1,2],"_")[[1]]
OTU.names[i,2] = split[length(split)]
}
}
#merge the OTU table according to the VT
OTU.table = read.table("results/PT_AMF.otu_table_from_biom.txt", sep = "\t", stringsAsFactors = F, header = T,skip=1,comment.char = "")
OTU.table = OTU.table[,-ncol(OTU.table)]
OTU.table$VT = 0
#add VT info to OTU table (only if present, otherwise, it stays with its 'OTU name')
for(i in 1:nrow(OTU.table))
{
temp = OTU.names[OTU.names[,1] == OTU.table[i,1],2]
if(temp !=0) OTU.table$VT[i] = temp #add VT
#  if(temp == 0) OTU.table$VT[i] = OTU.table[i,1] #add OTU name, because no VT.
}
dim(OTU.names)
dim(OTU.table)
OTU.table[1:5,1:5]
OTU.table[1:5,115:118]
OTU.table = read.table("results/PT_AMF.otu_table_from_biom.txt", sep = "\t", stringsAsFactors = F, header = T,skip=1,comment.char = "")
dim(OTU.table)
OTU.table[1:5,115:118]
#merge the OTU table according to the VT
OTU.table = read.table("results/PT_AMF.otu_table_from_biom.txt", sep = "\t", stringsAsFactors = F, header = T,skip=1,comment.char = "")
OTU.phylogeny = OTU.table[,ncol(OTU.table)]
OTU.table = OTU.table[,-ncol(OTU.table)]
OTU.table$VT = 0
#add VT info to OTU table (only if present, otherwise, it stays with its 'OTU name')
for(i in 1:nrow(OTU.table))
{
temp = OTU.names[OTU.names[,1] == OTU.table[i,1],2]
if(temp !=0) OTU.table$VT[i] = temp #add VT
#  if(temp == 0) OTU.table$VT[i] = OTU.table[i,1] #add OTU name, because no VT.
}
#Create a new table with all OTU names, VTX correspondance, phylogeny, and absolute abundance.
OTU.combined = cbind(OTU.phylogeny,OTU.table$VT,OTU.table[,-ncol(OTU.table)])
write.table(OTU.combined,"results/OTU_VT_abundance.txt",row.names = F, col.names = F, quote = F)
#Create a new table with all OTU names, VTX correspondance, phylogeny, and absolute abundance.
OTU.combined = cbind(OTU.table$VT,OTU.table[,-ncol(OTU.table)],OTU.phylogeny)
write.table(OTU.combined,"results/OTU_VT_abundance.txt",row.names = F, col.names = T, quote = F)
ncol(OTU.combined)
colnames(OTU.combined)[1:2]
colnames(OTU.combined)[1:2] = c("VT","OTU")
#Create a new table with all OTU names, VTX correspondance, phylogeny, and absolute abundance.
OTU.combined = cbind(OTU.table$VT,OTU.table[,-ncol(OTU.table)],OTU.phylogeny)
colnames(OTU.combined)[1:2] = c("VT","OTU")
write.table(OTU.combined,"results/OTU_VT_abundance.txt",row.names = F, col.names = T, quote = F)
OTU.table[1:4,1]
OTU.table[order(OTU.table[,1]),1]
OTU.table[order(OTU.table[,118]),118]
OTU.combined = cbind(OTU.table$VT,OTU.table[,-ncol(OTU.table)],OTU.phylogeny)
##rename column
colnames(OTU.combined)[1:2] = c("VT","OTU")
#reorder according to VT
OTU.table = OTU.table[order(OTU.table[,118]),118]
write.table(OTU.combined,"results/OTU_VT_abundance.txt",row.names = F, col.names = T, quote = F)
dim(OTU.combined)
OTU.combined = cbind(OTU.table$VT,OTU.table[,-ncol(OTU.table)],OTU.phylogeny)
##rename column
colnames(OTU.combined)[1:2] = c("VT","OTU")
#reorder according to VT
OTU.combined = OTU.combined[order(OTU.combined[,1]),]
write.table(OTU.combined,"results/OTU_VT_abundance.txt",row.names = F, col.names = T, quote = F)
write.table(OTU.combined,"results/TableS1_OTU_VT_abundance.txt",row.names = F, col.names = T, quote = F)
write.table(OTU.combined,"results/TableS1_OTU_VT_abundance.txt",row.names = F, col.names = T, quote = T)
