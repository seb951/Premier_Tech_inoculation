fraction_filt = fraction_filt[(maf_filt >0.05) & (maf_filt <0.95),]
vcf_genotype_filter = vcf_genotype_filter[(maf_filt >0.05) & (maf_filt <0.95),]
maf_filt = maf_filt[(maf_filt >0.05) & (maf_filt <0.95)]
dim(vcf_genotype)
dim(vcf_genotype_filter)
#store scalar values
scalar_list = list()
#split experiment in 3 site_locations
for(a in 1:3)
{
site_location = c("St1","St2","PRM")[a]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
#How many unique contigs have SNPs that I can analyse?
length(unique(sort(vcf_genotype_filter_site_location$chrom)))
dim(vcf_genotype_filter_site_location)
#order the dates and keep it as number of days.
dates = dates_intervals[regexpr(site_location,samples)>0]
ordered_dates = order(dates)
#dates = gsub(".$","",colnames(vcf_genotype_filter_site_location)[1:ncol(vcf_genotype_filter_site_location)])
#dates = ymd(as.numeric(gsub("^....","",dates)))
#ordered_dates = order(dates)
#x for ordered dates
x = rep(rle(dates[ordered_dates])$values, rle(dates[ordered_dates])$lengths)
###testing the logistic regression for each SNP
scalar = rep(1,nrow(vcf_genotype_filter_site_location))
for(p in 1:nrow(vcf_genotype_filter_site_location))
#for(p in 1:10000)
{
x = x
y = t(fraction_site_location[p,ordered_dates])
if(a !=3) {
#catch error messages with nls_err
fit <- nls_err(y ~ SSlogis(x, Asym, xmid, scal), data = data.frame(x, y))
fitted = summary(fit[[1]])
if(length(fit[[1]])>0) scalar[p] = (fitted$parameters[3,4])
}
if(a == 3) {cor_temp = cor.test_err(x,y) ; if((length(cor_temp[[1]]) > 0) && !is.na(cor_temp[[1]]$p.value)) scalar[p] = cor_temp[[1]]$p.value}
if(p %% 10000 == 0) print(paste(p," of: ",nrow(vcf_genotype_filter_site_location), ", The time is: ",Sys.time(),sep = ""))
}
#fit results into a list
scalar_list[[a]] = scalar
#time check
if(a == 3) scalar_list[[3]][is.na(scalar_list[[3]])] = 1
}
write.table(scalar_list,"results/dolicho/scalar_list_genome",row.names = F, col.names = F, quote = F)
#date start on 06-01, then +1 day each day...
dates_temp = colnames(vcf_genotype_filter)[1:65]
dates_temp = gsub("^....","",dates_temp)
dates_temp = ymd(as.numeric(gsub(".$","",dates_temp)))
dates_intervals = rep(0,65)
for(d in 2:65)
{
x = interval(dates_temp[1],dates_temp[d])
dates_intervals[d] = x %/% days(1)
}
#store scalar values
scalar_list = list()
#split experiment in 3 site_locations
for(a in 1:3)
{
site_location = c("St1","St2","PRM")[a]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
#How many unique contigs have SNPs that I can analyse?
length(unique(sort(vcf_genotype_filter_site_location$chrom)))
dim(vcf_genotype_filter_site_location)
#order the dates and keep it as number of days.
dates = dates_intervals[regexpr(site_location,samples)>0]
ordered_dates = order(dates)
#dates = gsub(".$","",colnames(vcf_genotype_filter_site_location)[1:ncol(vcf_genotype_filter_site_location)])
#dates = ymd(as.numeric(gsub("^....","",dates)))
#ordered_dates = order(dates)
#x for ordered dates
x = rep(rle(dates[ordered_dates])$values, rle(dates[ordered_dates])$lengths)
###testing the logistic regression for each SNP
scalar = rep(1,nrow(vcf_genotype_filter_site_location))
for(p in 1:nrow(vcf_genotype_filter_site_location))
#for(p in 1:10000)
{
x = x
y = t(fraction_site_location[p,ordered_dates])
if(a !=3) {
#catch error messages with nls_err
fit <- nls_err(y ~ SSlogis(x, Asym, xmid, scal), data = data.frame(x, y))
fitted = summary(fit[[1]])
if(length(fit[[1]])>0) scalar[p] = (fitted$parameters[3,4])
}
if(a == 3) {cor_temp = cor.test_err(x,y) ; if((length(cor_temp[[1]]) > 0) && !is.na(cor_temp[[1]]$p.value)) scalar[p] = cor_temp[[1]]$p.value}
if(p %% 10000 == 0) print(paste(p," of: ",nrow(vcf_genotype_filter_site_location), ", The time is: ",Sys.time(),sep = ""))
}
#fit results into a list
scalar_list[[a]] = scalar
#time check
if(a == 3) scalar_list[[3]][is.na(scalar_list[[3]])] = 1
}
write.table(scalar_list,"results/dolicho/scalar_list_genome",row.names = F, col.names = F, quote = F)
scalar_list_df = read.table("results/dolicho/scalar_list_genome",header = F)
total = nrow(scalar_list_df)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_qvalue = qvalue(scalar_pvalue)$pvalues
#  scalar_qvalue =p.adjust(scalar_pvalue,method = "fdr")
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval = 0.005
winners_st1 = c(1:total)[(scalar_list_corrected[,1]<qval)]
winners_st2 = c(1:total)[(scalar_list_corrected[,2]<qval)]
winners_prm = c(1:total)[(scalar_list_corrected[,3]<qval)]
winners_4 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval)]
winners_5 = c(1:total)[(scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
winners_6 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,3]<qval)]
winners_7 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
winners
###permutation test!!! -----
#Test the 22 in common: is it more than expected by chance? (permutation test!!!)
#1000 perm.! It is more than expected by chance
z = rep(0,10000)
winners_perm = rep(0,10000)
for(i in 1:10000)
{
x = sample(1:total,winners[3,1]+winners[6,1]+winners[8,1]+winners[9,1]) #1493
y = sample(1:total,winners[4,1]+winners[6,1]+winners[7,1]+winners[9,1]) #4269
z = sample(1:total,winners[5,1]+winners[7,1]+winners[8,1]+winners[9,1]) #3118
temp = x[x %in% y ]
winners_perm[i] = length(temp[temp %in% z ])
}
mean(winners_perm)
####
####MAF before day 50 and after day 75. ----
####st1 only
site_location = c("St1","St2","PRM")[1]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
dates = dates_intervals[regexpr(site_location,samples)>0]
begin_major = rep(0,nrow(vcf_genotype_filter_site_location))
end_major = rep(0,nrow(vcf_genotype_filter_site_location))
begin_minor = rep(0,nrow(vcf_genotype_filter_site_location))
end_minor = rep(0,nrow(vcf_genotype_filter_site_location))
for(i in 1:nrow(vcf_genotype_filter_site_location))
{
begin_major[i] = sum(major_site_location[i,dates<51])
end_major[i] = sum(major_site_location[i,dates>74])
begin_minor[i] = sum(minor_site_location[i,dates<51])
end_minor[i] = sum(minor_site_location[i,dates>74])
}
fraction_begin = begin_minor / (begin_major + begin_minor)
fraction_end = end_minor / (end_major + end_minor)
fraction_change = fraction_begin - fraction_end
#make sure the minor is really the minor...
###SNP density on a window basis-----
window = 10000
snp_density = data.frame(position = seq(0,4450000,by = window),density = 0)
fraction_change = data.frame(position = seq(0,4450000,by = window),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,71])>snp_density[s,1],71]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+window)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,71])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,71])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,71])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,71])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
###
###plots
###
#should have a sliding window of SNP density.... Should probably remove SNP with MAF <0.05....
#in a circos plot?
#snp_density
dev.new()
par(mfrow= c(2,1))
plot(snp_density,type = "l")
plot(snp_density,type = "l")
par(mar=c(1,1,1,1))
?par
dev.new()
par(mar=c(1,1,1,1))
plot(snp_density,type = "l")
ircos plot?
#snp_density
dev.new()
par(mfrow= c(2,1),mar = c(2,2,1,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,71]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.1,length(vcf_genotype_filter[winners_st1,71])),as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.15,length(vcf_genotype_filter[winners_st1,71])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.17,length(vcf_genotype_filter[winners_st2,71])),as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.22,length(vcf_genotype_filter[winners_st2,71])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.25,length(vcf_genotype_filter[winners_prm,71])),as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.3,length(vcf_genotype_filter[winners_prm,71])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.32,length(vcf_genotype_filter[winners_7,71])),as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.37,length(vcf_genotype_filter[winners_prm,71])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
dev.new()
par(mfrow= c(2,1),mar = c(2,2,1,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,71]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.1,length(vcf_genotype_filter[winners_st1,71])),as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.15,length(vcf_genotype_filter[winners_st1,71])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.17,length(vcf_genotype_filter[winners_st2,71])),as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.22,length(vcf_genotype_filter[winners_st2,71])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.25,length(vcf_genotype_filter[winners_prm,71])),as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.3,length(vcf_genotype_filter[winners_prm,71])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.32,length(vcf_genotype_filter[winners_7,71])),as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.37,length(vcf_genotype_filter[winners_prm,71])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
winners_7
vcf_genotype_filter[winners_7,71]
points(y = rep(1.45,9),x = vcf_genotype_filter[winners_7,71])
vcf_genotype_filter[winners_7,71]
rep(1.45,9)
points(y = rep(1.45,9),x = vcf_genotype_filter[winners_7,71])
points(y = rep(1.45,9),x = vcf_genotype_filter[winners_7,71],col = "green")
points(y = rep(1.4,9),x = vcf_genotype_filter[winners_7,71],col = "green")
points(x=1000000,y = 1)
points(x=1000000,y = 0.8)
points(x=1000000,y = 0.8,pch = 4)
points(x=1000000,y = 0.8,pch = 40)
points(x=1000000,y = 50,pch = 40)
dev.off()
points(y = rep(1.4,9),x = vcf_genotype_filter[winners_7,71],col = "green")
points(x=1000000,y = 50,pch = 40)
points(x=0.6,y = 1)
rep(1.45,9)
dev.new()
par(mfrow= c(2,1),mar = c(2,2,1,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,71]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.1,length(vcf_genotype_filter[winners_st1,71])),as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.15,length(vcf_genotype_filter[winners_st1,71])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.17,length(vcf_genotype_filter[winners_st2,71])),as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.22,length(vcf_genotype_filter[winners_st2,71])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.25,length(vcf_genotype_filter[winners_prm,71])),as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.3,length(vcf_genotype_filter[winners_prm,71])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.32,length(vcf_genotype_filter[winners_7,71])),as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.37,length(vcf_genotype_filter[winners_prm,71])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
dev.new()
par(mfrow= c(2,1),mar = c(2,2,1,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,71]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.1,length(vcf_genotype_filter[winners_st1,71])),as.numeric(vcf_genotype_filter[winners_st1,71]),rep(1.15,length(vcf_genotype_filter[winners_st1,71])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.17,length(vcf_genotype_filter[winners_st2,71])),as.numeric(vcf_genotype_filter[winners_st2,71]),rep(1.22,length(vcf_genotype_filter[winners_st2,71])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.25,length(vcf_genotype_filter[winners_prm,71])),as.numeric(vcf_genotype_filter[winners_prm,71]),rep(1.3,length(vcf_genotype_filter[winners_prm,71])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.32,length(vcf_genotype_filter[winners_7,71])),as.numeric(vcf_genotype_filter[winners_7,71]),rep(1.37,length(vcf_genotype_filter[winners_prm,71])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
points(x=0.6,y = 1)
points(y = rep(1.4,9),x = vcf_genotype_filter[winners_7,71],col = "green")
winners_7,71
winners_7
points(y = seq(0,1.5,by = 0.12),x = vcf_genotype_filter[winners_7,71],col = "green")
seq(0,1.5,by = 0.12)
seq(0,1.5,by = 0.13)
seq(0,1.5,by = 0.16)
seq(0,1.5,by = 0.17)
points(y = seq(0,1.5,by = 0.17),x = vcf_genotype_filter[winners_7,71],col = "darkgreen",pch =21)
points(y = seq(0,1.5,by = 0.17),x = vcf_genotype_filter[winners_7,71],col = "darkgreen",pch =21)
points(y = seq(0,1.5,by = 0.17),x = vcf_genotype_filter[winners_7,71],col = "darkgreen",pch =20)
rm(list =ls())
setwd("/Users/jerry/Documents/CSBQ/hijri/Premier_Tech")
#required packages
library(vegan)
library(nlme)
library(lme4)
library(ape)
library(pals)
library(dplyr)
library(ggplot2)
library(RVAideMemoire)
###Preparing OTU table and sampling design----
OTU = read.table("results/OTU.table.VT.merged.ordered.top.tsv",row.names = 1, sep = "\t",header =T,stringsAsFactors = F)
#taxonomy in a separate vector
taxo = OTU[,ncol(OTU)]
OTU = data.frame(t(OTU[,-c(ncol(OTU))]))
#order based on rownames
OTU = OTU[order(rownames(OTU)),]
#normalize based on total number of OTU in sample (given that some seq libraries may have started with more sequences, it's probably good to do...)
OTU.norm = OTU/rowSums(OTU)
#load sampling design
design = read.table("results/PT_crop_design.txt", sep = "\t", stringsAsFactors = F, row.names = 1,header = T)
#order based on rownames
design = design[order(rownames(design)),]
#remove samples that were discarded in the design (would need to ask Jacynthe how this was done?)
keep = rownames(design) %in% rownames(OTU.norm)
design.keep = design[keep,]
#Seven samples were discarded
rownames(design)[keep == F]
###VTX00113 ----
#This is the most abundant VTX, and a Glomus spp,so this is really what we are interested in...
#Is R. irregulare (VTX00113) more abundant in inoculated soils?
#prepare a matrix with only VTX00113 (note that you can also test VTX00114 (OTU.norm[,33]) and it shows the same pattern as VTX00113)
OTU.norm.VTX00113 = cbind(sqrt(OTU.norm[,1]),design.keep)
colnames(OTU.norm.VTX00113)[1] = colnames(OTU.norm)[1]
#linear mixed effect model (block is random)
lmm1 <- lme(VTX00113~treatment+species+growing_stage,data = OTU.norm.VTX00113,random = ~1|bloc, method = "REML")
anova(lmm1)
#              numDF denDF  F-value p-value
#(Intercept)       1   102 728.8265  <.0001
#treatment         1     8   0.2599  0.6240
#species           2     8  39.2675  0.0001***sig effect
#growing_stage     1   102   4.0835  0.0459** sig
#
shapiro.test(lmm1$residuals) #normaly distributed with the square root transform.
#test the interaction in a linear model?
lmm2 <- lm(VTX00113~treatment+species*growing_stage,data = OTU.norm.VTX00113)
anova(lmm2)
#                       Df Sum Sq Mean Sq F value   Pr(>F)
#treatment               1 0.0139 0.01391  0.4142  0.52119
#species                 2 2.9888 1.49440 44.4875 7.49e-15 ***
#growing_stage           1 0.1398 0.13978  4.1612  0.04378 *
#species:growing_stage   1 0.1289 0.12885  3.8358  0.05272 .  *not sign.. !!!!
#boxplots
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
#species
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
#growing_stage
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
TukeyHSD(aov(yourmodel))
TukeyHSD(aov(
anova(lmm1)
))
anova(lmm1)
TukeyHSD(anova(lmm1))
TukeyHSD(aov(lmm1))
TukeyHSD((lmm1))
TukeyHSD(lmm2)
(lmm2)
summary(lmm2)
summary(lmm1)
anova(lmm1)
anova(lmm2)
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b","a","b"),x = c(1.2,2.2),y = x$stats[5,]+max(x$stats[5,])/20,cex = 1.5,font =3)
x$stats
text(labels = c("a","b","a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#boxplots
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#species
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
dev.print(device=pdf, "figures/figure1_VTX00113.pdf", onefile=FALSE)
dev.off()
#boxplots
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#species
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
dev.print(device=pdf, "figures/figure1_VTX00113.pdf", onefile=FALSE)
dev.off()
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#species
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
#boxplots
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#species
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
dev.print(device=pdf, "figures/figure1_VTX00113.pdf", onefile=FALSE)
dev.off()
###alpha diversity ----
#prepare a matrix with alpha diversity as "invsimpson" index
OTU.norm.alpha = cbind(diversity(OTU.norm, index= "invsimpson"),design.keep)
OTU.norm.alpha[,1] = log(OTU.norm.alpha[,1])
colnames(OTU.norm.alpha)[1] = "alpha"
#linear mixed effect model on alpha diversity (block is random)
lmm.alpha <- lme(alpha~treatment+species+growing_stage,data = OTU.norm.alpha,random = ~1|bloc, method = "REML")
anova(lmm.alpha)
#              numDF denDF  F-value p-value
#(Intercept)       1   102 864.2705  <.0001
#treatment         1     8   0.0030  0.9575
#species           2     8  12.7100  0.0033 ***again only sig effect
#growing_stage     1   102   2.4562  0.1202
shapiro.test(lmm.alpha$residuals) #normaly distributed with the log transform
#test the interaction in a linear model?
lmm.alpha2 <- lm(alpha~treatment+species*growing_stage,data = OTU.norm.alpha)
anova(lmm.alpha2)
#                       Df  Sum Sq Mean Sq F value    Pr(>F)
#treatment               1  0.0006 0.00061  0.0030    0.9561
#species                 2  5.1225 2.56127 12.7627 1.047e-05 ***
#growing_stage           1  0.4950 0.49496  2.4664    0.1192
#species:growing_stage   1  0.2922 0.29224  1.4562    0.2301   # not signif!
# Residuals             109 21.8746 0.20068
###alpha diversity:boxplot ----
#3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
x = boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$treatment,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#species
x = boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$species,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$growing_stage,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
#boxplots
dev.new()
#boxplot: 3 boxplots for treatment, species and early/late
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$treatment,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
#species
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$species,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
x = boxplot(OTU.norm.VTX00113$VTX00113~OTU.norm.VTX00113$growing_stage,beside = F,font = 3, axisnames = T,ylab = "VTX00113 relative abundance",las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
text(labels = c("a","b"),x = c(1.2,2.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
dev.print(device=pdf, "figures/figure1_VTX00113.pdf", onefile=FALSE)
dev.off()
anova(lmm.alpha2)
summary(lmm.alpha2)
dev.new(width=10, height=6,units = "cm",noRStudioGD = TRUE)
par(mfrow = c(1,3),mar = c(6,5,4,2))
#treatment
boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$treatment,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Treatment",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(control),italic(inoculated)))
#species
x = boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$species,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Species",cex.main = 1.5,cex.lab = 1.5,names = expression(italic(Corn),italic(Soy),italic(Wheat)))
text(labels = c("a","b","c"),x = c(1.2,2.2,3.2),y = x$stats[4,]+max(x$stats[5,])/20,cex = 1.5,font =3)
#growing_stage
boxplot(OTU.norm.alpha$alpha~OTU.norm.alpha$growing_stage,beside = F,font = 3, axisnames = T,ylab = expression(italic(alpha)~~diversity),las = 3, xpd = T,main = "Growing stage",cex.lab = 1.5,cex.main = 1.5,names = expression(italic(early),italic(late)))
dev.print(device=pdf, "figures/figure4_alpha.pdf", onefile=FALSE)
dev.off()
